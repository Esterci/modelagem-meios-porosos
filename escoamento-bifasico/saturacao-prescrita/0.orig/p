/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile {
    version 2.0;
    format ascii;
    class volScalarField;
    location "0";
    object p;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions [0 0 0 0 0 0 0];

internalField uniform 0;

boundaryField {
    /* left
    {
        type            fixedGradient;
        gradient        uniform 20000.0;
    } */

    left {
        type            codedFixedGradient;
        value           #codeStream;

        codeInclude 
        #{ 
            #include "fvCFD.H"
        #};

        codeLibs 
        #{
            -lmeshTools \
            -lfiniteVolume 
        #};

        code 
        #{ 
            const IOdictionary& d = static_cast<const IOdictionary&> 
            ( 
                dict.parent().parent() 
            );

            const fvMesh& mesh = refCast<const fvMesh>(d.db()); 
            const label id = mesh.boundary().findPatchID("velocity-inlet-5"); 
            const fvPatch& patch = mesh.boundary()[id]; 
            vectorField p(patch.size(), 0);

            const scalar pi = constant::mathematical::pi; 
            const scalar U_0   = 2.; //maximum velocity
            const scalar p_ctr = 8.; //patch center 
            const scalar p_r   = 8.; //patch radius
            
            forAll(U, i) //equivalent to for (int i=0; patch.size()<i; i++)
            {
                const scalar y = patch.Cf()[i][1];
                U[i] = vector(U_0*(1-(pow(y -p_ctr,2))/(p_r*p_r)), 0., 0.);
            } 
            
            writeEntry(os, "", U);
            
        #};
    }

    right {
        type fixedValue;
        value uniform 0;
    }

    emptyFaces1D {
        type empty;
    }
}

/* boundaryField
{
    right
    {
        type            zeroGradient;
    }

    left
    {
        type            fixedGradient;
        gradient        uniform 20000;

        // type            fixedGradient;
        // gradient        
    }

    emptyFaces1D
    {
        type            empty;
    }
} */

// ************************************************************************* //